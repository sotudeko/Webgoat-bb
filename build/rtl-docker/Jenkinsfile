
pipeline {
    agent any

    environment {
      ARTEFACT_NAME = "${WORKSPACE}/target/WebGoat-${BUILD_VERSION}.war"
			APPNAME = 'webgoat'
			REGISTRY = 'sola.local:9002'
      TAG_FILE = "${WORKSPACE}/tag.json"
      IQ_SCAN_URL = ""
			JENKINS_CRED = 'docker-rgy-id'
      OUTPUT_DIR = "${WORKSPACE}/output"
    }

	tools {
        jdk 'jdk8'
    }

    stages {

        stage('Pre-build clean') {
            steps {
                 sh 'rm -rf ${OUTPUT_DIR} && mkdir ${OUTPUT_DIR}'
			}
        }

        stage('Build application') {
            steps {
                sh 'mvn -B -Dproject.version=$BUILD_VERSION -Dmaven.test.failure.ignore clean package'
            }
            post {
                success {
                    echo 'Now archiving...'
                    archiveArtifacts artifacts: "**/target/*.war"
                    sh '/bin/cp ${ARTEFACT_NAME} ${OUTPUT_DIR}/${APPNAME}.war'
                }
            }
        }

        stage('Build docker image'){
            steps {
                script {
                    docker.withRegistry("https://${REGISTRY}", "${JENKINS_CRED}") {
                        def customImage = docker.build("${APPNAME}")
                        customImage.push("${BUILD_VERSION}")
                        customImage.push("latest")
                    }
                }
            }
        }

        stage('Extract docker image'){
            steps { 
                sh 'docker save -o ${OUTPUT_DIR}/${APPNAME}.tar ${REGISTRY}/${APPNAME}:${BUILD_VERSION}'
            }
        }

        stage('Nexus IQ Scan'){
            steps {
                script{
                
                    try {
                        def policyEvaluation = nexusPolicyEvaluation failBuildOnNetworkError: true, iqApplication: selectedApplication('webgoat-docker'), iqScanPatterns: [[scanPattern: 'output/*']], iqStage: 'build', jobCredentialsId: 'admin'
                        echo "Nexus IQ scan succeeded: ${policyEvaluation.applicationCompositionReportUrl}"
                        IQ_SCAN_URL = "${policyEvaluation.applicationCompositionReportUrl}"
                    } 
                    catch (error) {
                        def policyEvaluation = error.policyEvaluation
                        echo "Nexus IQ scan vulnerabilities detected', ${policyEvaluation.applicationCompositionReportUrl}"
                        throw error
                    }
                }
            }
        }

        stage('Create tag'){
            steps {
                script {
    
                    // Git data (Git plugin)
                    echo "${GIT_COMMIT}"
                    echo "${GIT_URL}"
                    echo "${GIT_BRANCH}"
                    echo "${WORKSPACE}"
                    
                    // construct the meta data (Pipeline Utility Steps plugin)
                    def tagdata = readJSON text: '{}' 
                    tagdata.buildUser = "${USER}" as String
                    tagdata.buildNumber = "${BUILD_NUMBER}" as String
                    tagdata.buildId = "${BUILD_ID}" as String
                    tagdata.buildJob = "${JOB_NAME}" as String
                    tagdata.buildTag = "${BUILD_TAG}" as String
                    tagdata.appVersion = "${BUILD_VERSION}" as String
                    tagdata.buildUrl = "${BUILD_URL}" as String
                    tagdata.iqScanUrl = "${IQ_SCAN_URL}" as String
                    //tagData.promote = "no" as String

                    writeJSON(file: "${TAG_FILE}", json: tagdata, pretty: 4)
                    sh 'cat ${TAG_FILE}'

                    createTag nexusInstanceId: 'nxrm3', tagAttributesPath: "${TAG_FILE}", tagName: "${BUILD_TAG}"

                    // write the tag name to the build page (Rich Text Publisher plugin)
                    rtp abortedAsStable: false, failedAsStable: false, parserName: 'Confluence', stableText: "Nexus Repository Tag: ${BUILD_TAG}", unstableAsStable: true 
                }
            }
        }

        // stage('Associate Tag'){
		// 	steps {
		// 		script {
		// 			associateTag nexusInstanceId: 'nxrm3', search: [[key: 'Image Name', value: "${APPNAME}"], [key: 'Image Tag', value: "${BUILD_VERSION}"]], tagName: "${BUILD_TAG}"
		// 		}
		// 	}
        // }

    }
}

